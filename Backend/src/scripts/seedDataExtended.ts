import mongoose from "mongoose";
import bcrypt from "bcrypt";
import { connectDB } from "../config/db";

// Import models
import Category from "../modules/category/models/category.model";
import User from "../modules/user/models/user.model";
import Course from "../modules/course/models/course.model";
import Lesson from "../modules/lesson/models/lesson.model";
import Quiz from "../modules/quizz/models/quizz.model";
import Question from "../modules/question/models/question.model";
import Review from "../modules/review/models/review.model";
import Discussion from "../modules/discussion/models/discussion.model";
import Notification from "../modules/notification/models/notification.model";
import Schedule from "../modules/schedule/models/schedule.model";
import UsersQuizzes from "../modules/users_quizzes/models/users_quizzes.model";

const seedExtendedData = async () => {
  try {
    // K·∫øt n·ªëi database
    await connectDB();
    console.log("üîó ƒê√£ k·∫øt n·ªëi database");

    // X√≥a d·ªØ li·ªáu c≈©
    await Promise.all([
      Category.deleteMany({}),
      User.deleteMany({}),
      Course.deleteMany({}),
      Lesson.deleteMany({}),
      Quiz.deleteMany({}),
      Question.deleteMany({}),
      Review.deleteMany({}),
      Discussion.deleteMany({}),
      Notification.deleteMany({}),
      Schedule.deleteMany({}),
      UsersQuizzes.deleteMany({}),
    ]);
    console.log("üßπ ƒê√£ x√≥a d·ªØ li·ªáu c≈©");

    // 1. Seed Categories (9 categories)
    const categories = await Category.insertMany([
      {
        title: "L·∫≠p tr√¨nh Web",
        description:
          "C√°c kh√≥a h·ªçc v·ªÅ ph√°t tri·ªÉn web frontend v√† backend v·ªõi React, Vue, Angular, Node.js",
      },
      {
        title: "Khoa h·ªçc d·ªØ li·ªáu",
        description:
          "Machine learning, AI, ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi Python, R, TensorFlow",
      },
      {
        title: "Thi·∫øt k·∫ø UI/UX",
        description:
          "Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng v·ªõi Figma, Adobe XD",
      },
      {
        title: "Mobile Development",
        description:
          "Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông iOS, Android v·ªõi Flutter, React Native, Swift",
      },
      {
        title: "DevOps & Cloud",
        description:
          "Tri·ªÉn khai, qu·∫£n l√Ω h·ªá th·ªëng v·ªõi Docker, Kubernetes, AWS, Azure",
      },
      {
        title: "Blockchain & Web3",
        description:
          "C√¥ng ngh·ªá blockchain, smart contracts, DeFi, NFT v·ªõi Solidity, Web3.js",
      },
      {
        title: "Game Development",
        description: "Ph√°t tri·ªÉn game v·ªõi Unity, Unreal Engine, C#, C++",
      },
      {
        title: "Database & Big Data",
        description:
          "C∆° s·ªü d·ªØ li·ªáu SQL, NoSQL, Big Data v·ªõi MongoDB, PostgreSQL, Hadoop",
      },
      {
        title: "Cybersecurity",
        description: "B·∫£o m·∫≠t th√¥ng tin, ethical hacking, penetration testing",
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Categories");

    // 2. Seed Users (20 users total)
    const hashedPassword = await bcrypt.hash("123456", 12);

    const users = await User.insertMany([
      // Admin
      {
        email: "admin@edutech.vn",
        password: hashedPassword,
        fullName: "Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng",
        role: "admin",
        avatar: "https://i.pravatar.cc/400?img=1",
      },
      // Teachers (8 gi·∫£ng vi√™n)
      {
        email: "nguyenvana@edutech.vn",
        password: hashedPassword,
        fullName: "Nguy·ªÖn VƒÉn An",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=2",
      },
      {
        email: "lethib@edutech.vn",
        password: hashedPassword,
        fullName: "L√™ Th·ªã B√¨nh",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=3",
      },
      {
        email: "tranvanc@edutech.vn",
        password: hashedPassword,
        fullName: "Tr·∫ßn VƒÉn C∆∞·ªùng",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=4",
      },
      {
        email: "phamthid@edutech.vn",
        password: hashedPassword,
        fullName: "Ph·∫°m Th·ªã Dung",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=5",
      },
      {
        email: "hoangvane@edutech.vn",
        password: hashedPassword,
        fullName: "Ho√†ng VƒÉn Em",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=6",
      },
      {
        email: "vuthif@edutech.vn",
        password: hashedPassword,
        fullName: "V≈© Th·ªã Ph∆∞∆°ng",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=7",
      },
      {
        email: "dangvang@edutech.vn",
        password: hashedPassword,
        fullName: "ƒê·∫∑ng VƒÉn Giang",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=8",
      },
      {
        email: "buithih@edutech.vn",
        password: hashedPassword,
        fullName: "B√πi Th·ªã H∆∞∆°ng",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=9",
      },
      // Students (11 h·ªçc vi√™n)
      {
        email: "student1@gmail.com",
        password: hashedPassword,
        fullName: "Nguy·ªÖn Th·ªã Hoa",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=10",
      },
      {
        email: "student2@gmail.com",
        password: hashedPassword,
        fullName: "Tr·∫ßn VƒÉn Minh",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=11",
      },
      {
        email: "student3@gmail.com",
        password: hashedPassword,
        fullName: "L√™ Th·ªã Lan",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=12",
      },
      {
        email: "student4@gmail.com",
        password: hashedPassword,
        fullName: "Ph·∫°m VƒÉn Nam",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=13",
      },
      {
        email: "student5@gmail.com",
        password: hashedPassword,
        fullName: "V≈© Th·ªã Oanh",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=14",
      },
      {
        email: "student6@gmail.com",
        password: hashedPassword,
        fullName: "ƒê·∫∑ng VƒÉn Ph√∫c",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=15",
      },
      {
        email: "student7@gmail.com",
        password: hashedPassword,
        fullName: "Ng√¥ Th·ªã Quy√™n",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=16",
      },
      {
        email: "student8@gmail.com",
        password: hashedPassword,
        fullName: "L√Ω VƒÉn S∆°n",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=17",
      },
      {
        email: "student9@gmail.com",
        password: hashedPassword,
        fullName: "Chu Th·ªã Trang",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=18",
      },
      {
        email: "student10@gmail.com",
        password: hashedPassword,
        fullName: "ƒêinh VƒÉn Uy",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=19",
      },
      {
        email: "student11@gmail.com",
        password: hashedPassword,
        fullName: "V√µ Th·ªã V√¢n",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=20",
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Users");

    // L·∫•y teachers v√† students
    const teachers = users.filter((user) => user.role === "teacher");
    const students = users.filter((user) => user.role === "student");

    // 3. Seed Courses (15 kh√≥a h·ªçc)
    const courses = await Course.insertMany([
      // Web Development (4 courses)
      {
        title: "React.js T·ª´ C∆° B·∫£n ƒê·∫øn N√¢ng Cao",
        description:
          "Kh√≥a h·ªçc to√†n di·ªán v·ªÅ React.js, t·ª´ nh·ªØng kh√°i ni·ªám c∆° b·∫£n ƒë·∫øn c√°c k·ªπ thu·∫≠t n√¢ng cao. B·∫°n s·∫Ω h·ªçc c√°ch x√¢y d·ª±ng ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i v·ªõi React, Redux, Hooks v√† nhi·ªÅu th∆∞ vi·ªán h·ªØu √≠ch kh√°c.",
        instructorId: teachers[0]._id,
        category: "L·∫≠p tr√¨nh Web",
        users: [
          students[0]._id,
          students[1]._id,
          students[2]._id,
          students[3]._id,
        ],
        resources: [
          "https://reactjs.org/docs",
          "https://github.com/facebook/react",
          "React Developer Tools",
        ],
      },
      {
        title: "Vue.js 3 & Composition API",
        description:
          "H·ªçc Vue.js 3 v·ªõi Composition API m·ªõi, Pinia state management, v√† c√°c best practices trong ph√°t tri·ªÉn ·ª©ng d·ª•ng Vue hi·ªán ƒë·∫°i.",
        instructorId: teachers[0]._id,
        category: "L·∫≠p tr√¨nh Web",
        users: [students[1]._id, students[4]._id, students[5]._id],
        resources: ["https://vuejs.org/", "Vue 3 Documentation", "Pinia Store"],
      },
      {
        title: "Node.js Backend Development",
        description:
          "X√¢y d·ª±ng RESTful API v·ªõi Node.js, Express.js, MongoDB. H·ªçc v·ªÅ authentication, authorization, security v√† deployment.",
        instructorId: teachers[4]._id,
        category: "L·∫≠p tr√¨nh Web",
        users: [
          students[0]._id,
          students[2]._id,
          students[6]._id,
          students[7]._id,
        ],
        resources: [
          "Node.js Documentation",
          "Express.js Guide",
          "MongoDB University",
        ],
      },
      {
        title: "Full Stack JavaScript MERN",
        description:
          "Kh√≥a h·ªçc full stack v·ªõi MongoDB, Express.js, React.js v√† Node.js. X√¢y d·ª±ng ·ª©ng d·ª•ng web ho√†n ch·ªânh t·ª´ A-Z.",
        instructorId: teachers[0]._id,
        category: "L·∫≠p tr√¨nh Web",
        users: [students[3]._id, students[8]._id, students[9]._id],
        resources: ["MERN Stack Tutorial", "Git & GitHub", "Deployment Guide"],
      },

      // Data Science (3 courses)
      {
        title: "Python cho Khoa H·ªçc D·ªØ Li·ªáu",
        description:
          "H·ªçc Python t·ª´ ƒë·∫ßu v·ªõi focus v√†o data science. Kh√≥a h·ªçc bao g·ªìm pandas, numpy, matplotlib, seaborn v√† machine learning c∆° b·∫£n v·ªõi scikit-learn.",
        instructorId: teachers[1]._id,
        category: "Khoa h·ªçc d·ªØ li·ªáu",
        users: [
          students[1]._id,
          students[2]._id,
          students[3]._id,
          students[10]._id,
        ],
        resources: [
          "https://pandas.pydata.org/",
          "https://numpy.org/",
          "Jupyter Notebook",
        ],
      },
      {
        title: "Machine Learning v·ªõi TensorFlow",
        description:
          "Kh√≥a h·ªçc ML chuy√™n s√¢u v·ªõi TensorFlow v√† Keras. T·ª´ neural networks c∆° b·∫£n ƒë·∫øn deep learning v√† computer vision.",
        instructorId: teachers[1]._id,
        category: "Khoa h·ªçc d·ªØ li·ªáu",
        users: [students[4]._id, students[5]._id, students[6]._id],
        resources: ["TensorFlow Documentation", "Keras Guide", "Google Colab"],
      },
      {
        title: "Data Visualization v·ªõi Power BI",
        description:
          "T·∫°o dashboard v√† b√°o c√°o t∆∞∆°ng t√°c v·ªõi Power BI. H·ªçc c√°ch k·∫øt n·ªëi d·ªØ li·ªáu, t·∫°o measures v√† visualizations chuy√™n nghi·ªáp.",
        instructorId: teachers[7]._id,
        category: "Khoa h·ªçc d·ªØ li·ªáu",
        users: [students[7]._id, students[8]._id, students[9]._id],
        resources: ["Power BI Documentation", "DAX Functions", "Power Query"],
      },

      // UI/UX Design (2 courses)
      {
        title: "Thi·∫øt k·∫ø UI/UX v·ªõi Figma",
        description:
          "Kh√≥a h·ªçc thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng chuy√™n nghi·ªáp v·ªõi Figma. T·ª´ wireframe, prototype ƒë·∫øn design system ho√†n ch·ªânh.",
        instructorId: teachers[2]._id,
        category: "Thi·∫øt k·∫ø UI/UX",
        users: [
          students[0]._id,
          students[3]._id,
          students[4]._id,
          students[8]._id,
        ],
        resources: [
          "https://figma.com",
          "Material Design Guidelines",
          "Apple Human Interface Guidelines",
        ],
      },
      {
        title: "Adobe XD v√† Prototyping",
        description:
          "H·ªçc thi·∫øt k·∫ø UI/UX v·ªõi Adobe XD, t·∫°o prototype t∆∞∆°ng t√°c v√† h·ªá th·ªëng design components c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng.",
        instructorId: teachers[2]._id,
        category: "Thi·∫øt k·∫ø UI/UX",
        users: [students[5]._id, students[7]._id, students[10]._id],
        resources: [
          "Adobe XD Tutorials",
          "Design Systems",
          "Interaction Design",
        ],
      },

      // Mobile Development (2 courses)
      {
        title: "Flutter - Ph√°t tri·ªÉn App di ƒë·ªông",
        description:
          "X√¢y d·ª±ng ·ª©ng d·ª•ng di ƒë·ªông cho c·∫£ iOS v√† Android v·ªõi Flutter. T·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, deploy l√™n store v√† monetization.",
        instructorId: teachers[3]._id,
        category: "Mobile Development",
        users: [
          students[2]._id,
          students[4]._id,
          students[5]._id,
          students[9]._id,
        ],
        resources: [
          "https://flutter.dev/",
          "Dart Language Tour",
          "Firebase Documentation",
        ],
      },
      {
        title: "React Native Cross-Platform",
        description:
          "Ph√°t tri·ªÉn ·ª©ng d·ª•ng mobile v·ªõi React Native. Navigation, state management, native modules v√† performance optimization.",
        instructorId: teachers[3]._id,
        category: "Mobile Development",
        users: [
          students[1]._id,
          students[6]._id,
          students[8]._id,
          students[10]._id,
        ],
        resources: ["React Native Docs", "Expo Documentation", "Metro Bundler"],
      },

      // DevOps & Cloud (2 courses)
      {
        title: "DevOps v·ªõi Docker v√† Kubernetes",
        description:
          "H·ªçc c√°ch containerize ·ª©ng d·ª•ng v·ªõi Docker v√† orchestration v·ªõi Kubernetes. Bao g·ªìm CI/CD pipeline v·ªõi Jenkins v√† GitLab.",
        instructorId: teachers[4]._id,
        category: "DevOps & Cloud",
        users: [
          students[1]._id,
          students[4]._id,
          students[5]._id,
          students[7]._id,
        ],
        resources: [
          "https://docs.docker.com/",
          "https://kubernetes.io/docs/",
          "Jenkins Documentation",
        ],
      },
      {
        title: "AWS Cloud Solutions Architect",
        description:
          "Thi·∫øt k·∫ø v√† tri·ªÉn khai solutions tr√™n AWS. EC2, S3, RDS, Lambda, CloudFormation v√† security best practices.",
        instructorId: teachers[4]._id,
        category: "DevOps & Cloud",
        users: [
          students[0]._id,
          students[3]._id,
          students[6]._id,
          students[9]._id,
        ],
        resources: [
          "AWS Documentation",
          "Well-Architected Framework",
          "AWS CLI",
        ],
      },

      // Blockchain (1 course)
      {
        title: "Blockchain v√† Smart Contracts",
        description:
          "T√¨m hi·ªÉu c√¥ng ngh·ªá blockchain, ph√°t tri·ªÉn smart contracts v·ªõi Solidity, x√¢y d·ª±ng DApps v√† t∆∞∆°ng t√°c v·ªõi Web3.",
        instructorId: teachers[5]._id,
        category: "Blockchain & Web3",
        users: [
          students[0]._id,
          students[2]._id,
          students[5]._id,
          students[8]._id,
        ],
        resources: [
          "https://ethereum.org/",
          "Solidity Documentation",
          "Web3.js Guide",
        ],
      },

      // Game Development (1 course)
      {
        title: "Unity Game Development 2D/3D",
        description:
          "Ph√°t tri·ªÉn game 2D v√† 3D v·ªõi Unity Engine. T·ª´ game mechanics c∆° b·∫£n ƒë·∫øn publish l√™n c√°c platform.",
        instructorId: teachers[6]._id,
        category: "Game Development",
        users: [
          students[3]._id,
          students[7]._id,
          students[9]._id,
          students[10]._id,
        ],
        resources: [
          "Unity Documentation",
          "C# Programming Guide",
          "Unity Asset Store",
        ],
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Courses");

    // 4. Seed Lessons (45 lessons total, 3 lessons per course)
    const allLessons = [];

    for (let i = 0; i < courses.length; i++) {
      const course = courses[i];
      let lessons = [];

      if (course.title.includes("React.js")) {
        lessons = await Lesson.insertMany([
          {
            title: "Gi·ªõi thi·ªáu v·ªÅ React.js v√† Setup Environment",
            content:
              "React l√† m·ªôt th∆∞ vi·ªán JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Facebook ƒë·ªÉ x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng. Trong b√†i h·ªçc n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ l·ªãch s·ª≠ ph√°t tri·ªÉn c·ªßa React, so s√°nh v·ªõi c√°c framework kh√°c nh∆∞ Angular v√† Vue.js, c≈©ng nh∆∞ c√°ch c√†i ƒë·∫∑t v√† setup m√¥i tr∆∞·ªùng ph√°t tri·ªÉn.",
            courseId: course._id,
            resources: [
              "Create React App",
              "Node.js v√† npm",
              "VS Code Extensions",
            ],
          },
          {
            title: "JSX v√† Components",
            content:
              "JSX (JavaScript XML) l√† c√∫ ph√°p m·ªü r·ªông c·ªßa JavaScript cho ph√©p vi·∫øt HTML trong JavaScript m·ªôt c√°ch tr·ª±c quan. Components l√† kh·ªëi x√¢y d·ª±ng c∆° b·∫£n c·ªßa React, c√≥ th·ªÉ l√† function components ho·∫∑c class components. Ch√∫ng ta s·∫Ω h·ªçc c√°ch t·∫°o v√† s·ª≠ d·ª•ng components hi·ªáu qu·∫£.",
            courseId: course._id,
            resources: ["JSX In Depth", "Component Props", "Thinking in React"],
          },
          {
            title: "State Management v√† Hooks",
            content:
              "State l√† d·ªØ li·ªáu ƒë·ªông trong React components. React Hooks nh∆∞ useState, useEffect, useContext gi√∫p qu·∫£n l√Ω state v√† side effects trong functional components. T√¨m hi·ªÉu lifecycle methods v√† c√°ch optimize performance.",
            courseId: course._id,
            resources: ["useState Hook", "useEffect Hook", "Custom Hooks"],
          },
        ]);
      } else if (course.title.includes("Vue.js")) {
        lessons = await Lesson.insertMany([
          {
            title: "Vue.js 3 Fundamentals v√† Composition API",
            content:
              "Vue.js 3 gi·ªõi thi·ªáu Composition API m·ªõi, cho ph√©p t·ªï ch·ª©c code t·ªët h∆°n v√† reusability cao h∆°n. T√¨m hi·ªÉu v·ªÅ reactive system, ref v√† reactive, v√† c√°ch migration t·ª´ Options API.",
            courseId: course._id,
            resources: [
              "Vue 3 Migration Guide",
              "Composition API RFC",
              "Reactivity in Depth",
            ],
          },
          {
            title: "Components v√† Template Syntax",
            content:
              "H·ªçc c√°ch t·∫°o v√† s·ª≠ d·ª•ng Vue components, template syntax, directives (v-if, v-for, v-model), v√† component communication th√¥ng qua props v√† events.",
            courseId: course._id,
            resources: [
              "Template Syntax",
              "Component Registration",
              "Props Validation",
            ],
          },
          {
            title: "State Management v·ªõi Pinia",
            content:
              "Pinia l√† state management library ch√≠nh th·ª©c cho Vue 3, thay th·∫ø Vuex. H·ªçc c√°ch t·∫°o stores, actions, getters v√† integrate v·ªõi TypeScript.",
            courseId: course._id,
            resources: [
              "Pinia Documentation",
              "State Management Pattern",
              "TypeScript Support",
            ],
          },
        ]);
      } else if (course.title.includes("Node.js")) {
        lessons = await Lesson.insertMany([
          {
            title: "Node.js Basics v√† NPM",
            content:
              "Node.js cho ph√©p ch·∫°y JavaScript tr√™n server. T√¨m hi·ªÉu v·ªÅ event loop, modules system, NPM package manager v√† c√°ch x√¢y d·ª±ng CLI applications.",
            courseId: course._id,
            resources: [
              "Node.js Documentation",
              "NPM Guide",
              "Event Loop Explained",
            ],
          },
          {
            title: "Express.js v√† RESTful APIs",
            content:
              "Express.js l√† framework ph·ªï bi·∫øn nh·∫•t cho Node.js. H·ªçc c√°ch t·∫°o RESTful APIs, middleware, routing, error handling v√† validation.",
            courseId: course._id,
            resources: [
              "Express.js Guide",
              "REST API Design",
              "Middleware Patterns",
            ],
          },
          {
            title: "Database Integration v√† Authentication",
            content:
              "K·∫øt n·ªëi v·ªõi MongoDB using Mongoose, thi·∫øt k·∫ø schema, authentication v·ªõi JWT, authorization v√† security best practices.",
            courseId: course._id,
            resources: [
              "Mongoose Documentation",
              "JWT Authentication",
              "Security Checklist",
            ],
          },
        ]);
      } else if (course.title.includes("Python")) {
        lessons = await Lesson.insertMany([
          {
            title: "Python Fundamentals cho Data Science",
            content:
              "T·ªïng quan v·ªÅ Python syntax, data types, control structures v√† functions. C√†i ƒë·∫∑t Anaconda, Jupyter Notebook v√† c√°c libraries quan tr·ªçng nh∆∞ NumPy, Pandas.",
            courseId: course._id,
            resources: [
              "Python.org Tutorial",
              "Anaconda Distribution",
              "Jupyter Documentation",
            ],
          },
          {
            title: "NumPy v√† Pandas Data Manipulation",
            content:
              "NumPy arrays cho t√≠nh to√°n khoa h·ªçc hi·ªáu qu·∫£. Pandas DataFrame v√† Series cho data manipulation, cleaning, transformation v√† analysis.",
            courseId: course._id,
            resources: [
              "NumPy Quickstart",
              "Pandas User Guide",
              "Data Cleaning Techniques",
            ],
          },
          {
            title: "Data Visualization v√† Statistics",
            content:
              "Matplotlib v√† Seaborn cho data visualization. Descriptive statistics, correlation analysis v√† c√°c statistical tests c∆° b·∫£n.",
            courseId: course._id,
            resources: [
              "Matplotlib Gallery",
              "Seaborn Tutorial",
              "Statistical Analysis",
            ],
          },
        ]);
      } else {
        // Generic lessons cho c√°c kh√≥a h·ªçc kh√°c
        lessons = await Lesson.insertMany([
          {
            title: `C∆° b·∫£n v·ªÅ ${course.title}`,
            content: `B√†i h·ªçc gi·ªõi thi·ªáu nh·ªØng kh√°i ni·ªám c∆° b·∫£n v√† quan tr·ªçng nh·∫•t trong ${course.title}. Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng ph√°t tri·ªÉn v√† c√°c c√¥ng c·ª• c·∫ßn thi·∫øt.`,
            courseId: course._id,
            resources: [
              "Official Documentation",
              "Getting Started Guide",
              "Best Practices",
            ],
          },
          {
            title: `Th·ª±c h√†nh v·ªõi ${course.title}`,
            content: `√Åp d·ª•ng ki·∫øn th·ª©c ƒë√£ h·ªçc v√†o c√°c b√†i t·∫≠p th·ª±c t·∫ø. X√¢y d·ª±ng project nh·ªè ƒë·ªÉ consolidate understanding v√† skills.`,
            courseId: course._id,
            resources: [
              "Practice Exercises",
              "Code Examples",
              "Project Templates",
            ],
          },
          {
            title: `N√¢ng cao v√† Best Practices`,
            content: `C√°c k·ªπ thu·∫≠t n√¢ng cao, optimization, performance tuning v√† industry best practices. Chu·∫©n b·ªã cho real-world applications.`,
            courseId: course._id,
            resources: [
              "Advanced Techniques",
              "Performance Guide",
              "Production Checklist",
            ],
          },
        ]);
      }

      allLessons.push(...lessons);
    }
    console.log("‚úÖ ƒê√£ seed Lessons");

    // 5. Seed Quizzes (30 quizzes total, 2 per course)
    const allQuizzes = [];
    for (let i = 0; i < courses.length; i++) {
      const course = courses[i];
      const categoryObj = categories.find(
        (cat) => cat.title === course.category
      );

      const quizzes = await Quiz.insertMany([
        {
          title: `Ki·ªÉm tra c∆° b·∫£n - ${course.title}`,
          description: `ƒê√°nh gi√° ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ ${course.title}. T·∫≠p trung v√†o c√°c kh√°i ni·ªám fundamental v√† syntax.`,
          courseId: course._id,
          duration: 20,
          level: 1,
          category: categoryObj._id,
        },
        {
          title: `Ki·ªÉm tra n√¢ng cao - ${course.title}`,
          description: `ƒê√°nh gi√° hi·ªÉu bi·∫øt s√¢u v·ªÅ ${course.title}. Bao g·ªìm best practices, advanced concepts v√† problem solving.`,
          courseId: course._id,
          duration: 35,
          level: 2,
          category: categoryObj._id,
        },
      ]);

      allQuizzes.push(...quizzes);
    }
    console.log("‚úÖ ƒê√£ seed Quizzes");

    // 6. Seed Questions (120 questions total, 4 per quiz)
    const allQuestions = [];

    // React.js Questions
    const reactQuestions = [
      {
        questionText: "JSX l√† vi·∫øt t·∫Øt c·ªßa g√¨?",
        answers: [
          { answerText: "JavaScript XML", isCorrect: true },
          { answerText: "Java Syntax Extension", isCorrect: false },
          { answerText: "JavaScript eXtension", isCorrect: false },
          { answerText: "JSON XML", isCorrect: false },
        ],
        questionType: ["single_choice"],
      },
      {
        questionText: "Component n√†o sau ƒë√¢y l√† functional component?",
        answers: [
          {
            answerText: "class MyComponent extends React.Component",
            isCorrect: false,
          },
          {
            answerText: "function MyComponent() { return <div></div> }",
            isCorrect: true,
          },
          {
            answerText: "const MyComponent = React.createClass()",
            isCorrect: false,
          },
          {
            answerText: "var MyComponent = new React.Component()",
            isCorrect: false,
          },
        ],
        questionType: ["single_choice"],
      },
      {
        questionText: "React Hooks n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ qu·∫£n l√Ω state?",
        answers: [
          { answerText: "useState", isCorrect: true },
          { answerText: "useEffect", isCorrect: false },
          { answerText: "useContext", isCorrect: false },
          { answerText: "useReducer", isCorrect: true },
        ],
        questionType: ["multiple_choice"],
      },
      {
        questionText: "Virtual DOM c√≥ ∆∞u ƒëi·ªÉm g√¨?",
        answers: [
          { answerText: "TƒÉng performance", isCorrect: true },
          { answerText: "D·ªÖ debug h∆°n", isCorrect: true },
          { answerText: "Batch updates", isCorrect: true },
          { answerText: "Gi·∫£m memory usage", isCorrect: false },
        ],
        questionType: ["multiple_choice"],
      },
    ];

    // Vue.js Questions
    const vueQuestions = [
      {
        questionText:
          "Composition API trong Vue 3 c√≥ ∆∞u ƒëi·ªÉm g√¨ so v·ªõi Options API?",
        answers: [
          { answerText: "Better TypeScript support", isCorrect: true },
          { answerText: "Code reusability", isCorrect: true },
          { answerText: "D·ªÖ h·ªçc h∆°n", isCorrect: false },
          { answerText: "Better organization", isCorrect: true },
        ],
        questionType: ["multiple_choice"],
      },
      {
        questionText:
          "Directive n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ two-way data binding trong Vue?",
        answers: [
          { answerText: "v-bind", isCorrect: false },
          { answerText: "v-model", isCorrect: true },
          { answerText: "v-on", isCorrect: false },
          { answerText: "v-if", isCorrect: false },
        ],
        questionType: ["single_choice"],
      },
      {
        questionText: "Pinia l√† g√¨ trong Vue ecosystem?",
        answers: [
          { answerText: "State management library", isCorrect: true },
          { answerText: "Routing library", isCorrect: false },
          { answerText: "UI component library", isCorrect: false },
          { answerText: "Testing framework", isCorrect: false },
        ],
        questionType: ["single_choice"],
      },
      {
        questionText:
          "Reactive function n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng trong Composition API?",
        answers: [
          { answerText: "ref()", isCorrect: true },
          { answerText: "reactive()", isCorrect: true },
          { answerText: "computed()", isCorrect: true },
          { answerText: "watch()", isCorrect: false },
        ],
        questionType: ["multiple_choice"],
      },
    ];

    // Node.js Questions
    const nodeQuestions = [
      {
        questionText: "Node.js ch·∫°y tr√™n engine JavaScript n√†o?",
        answers: [
          { answerText: "V8", isCorrect: true },
          { answerText: "SpiderMonkey", isCorrect: false },
          { answerText: "JavaScriptCore", isCorrect: false },
          { answerText: "Chakra", isCorrect: false },
        ],
        questionType: ["single_choice"],
      },
      {
        questionText: "HTTP methods n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng trong RESTful API?",
        answers: [
          { answerText: "GET", isCorrect: true },
          { answerText: "POST", isCorrect: true },
          { answerText: "PUT", isCorrect: true },
          { answerText: "FETCH", isCorrect: false },
        ],
        questionType: ["multiple_choice"],
      },
      {
        questionText: "Express.js middleware ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨?",
        answers: [
          { answerText: "Process requests", isCorrect: true },
          { answerText: "Handle errors", isCorrect: true },
          { answerText: "Authentication", isCorrect: true },
          { answerText: "Database connection", isCorrect: false },
        ],
        questionType: ["multiple_choice"],
      },
      {
        questionText: "JWT l√† vi·∫øt t·∫Øt c·ªßa g√¨?",
        answers: [
          { answerText: "JSON Web Token", isCorrect: true },
          { answerText: "JavaScript Web Token", isCorrect: false },
          { answerText: "Java Web Token", isCorrect: false },
          { answerText: "JSON Web Text", isCorrect: false },
        ],
        questionType: ["single_choice"],
      },
    ];

    // Python Data Science Questions
    const pythonQuestions = [
      {
        questionText: "NumPy array c√≥ ∆∞u ƒëi·ªÉm g√¨ so v·ªõi Python list?",
        answers: [
          { answerText: "Nhanh h∆°n trong t√≠nh to√°n", isCorrect: true },
          { answerText: "Ti·∫øt ki·ªám b·ªô nh·ªõ h∆°n", isCorrect: true },
          { answerText: "H·ªó tr·ª£ vectorization", isCorrect: true },
          { answerText: "D·ªÖ s·ª≠ d·ª•ng h∆°n", isCorrect: false },
        ],
        questionType: ["multiple_choice"],
      },
      {
        questionText: "Pandas DataFrame ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨?",
        answers: [
          { answerText: "Store tabular data", isCorrect: true },
          { answerText: "Data manipulation", isCorrect: true },
          { answerText: "Statistical analysis", isCorrect: true },
          { answerText: "Web scraping", isCorrect: false },
        ],
        questionType: ["multiple_choice"],
      },
      {
        questionText:
          "Method n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ handle missing data trong pandas?",
        answers: [
          { answerText: "dropna()", isCorrect: true },
          { answerText: "fillna()", isCorrect: false },
          { answerText: "isna()", isCorrect: false },
          { answerText: "interpolate()", isCorrect: false },
        ],
        questionType: ["single_choice"],
      },
      {
        questionText:
          "Libraries n√†o th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng cho data visualization trong Python?",
        answers: [
          { answerText: "Matplotlib", isCorrect: true },
          { answerText: "Seaborn", isCorrect: true },
          { answerText: "Plotly", isCorrect: true },
          { answerText: "NumPy", isCorrect: false },
        ],
        questionType: ["multiple_choice"],
      },
    ];

    // Generic questions cho c√°c course kh√°c
    const genericQuestions = [
      {
        questionText:
          "Best practice n√†o quan tr·ªçng nh·∫•t trong software development?",
        answers: [
          { answerText: "Code documentation", isCorrect: true },
          { answerText: "Version control", isCorrect: true },
          { answerText: "Testing", isCorrect: true },
          { answerText: "Using latest technology", isCorrect: false },
        ],
        questionType: ["multiple_choice"],
      },
      {
        questionText: "Agile methodology c√≥ ∆∞u ƒëi·ªÉm g√¨?",
        answers: [
          { answerText: "Flexible to changes", isCorrect: true },
          { answerText: "Faster delivery", isCorrect: true },
          { answerText: "Better collaboration", isCorrect: true },
          { answerText: "No documentation needed", isCorrect: false },
        ],
        questionType: ["multiple_choice"],
      },
      {
        questionText: "Clean code c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
        answers: [
          { answerText: "Easy to read", isCorrect: true },
          { answerText: "Self-documenting", isCorrect: false },
          { answerText: "Maintainable", isCorrect: false },
          { answerText: "Complex logic", isCorrect: false },
        ],
        questionType: ["single_choice"],
      },
      {
        questionText: "Security considerations trong web development?",
        answers: [
          { answerText: "Input validation", isCorrect: true },
          { answerText: "Authentication", isCorrect: true },
          { answerText: "HTTPS usage", isCorrect: true },
          { answerText: "Storing passwords in plain text", isCorrect: false },
        ],
        questionType: ["multiple_choice"],
      },
    ];

    // T·∫°o questions cho t·ª´ng quiz
    for (let i = 0; i < allQuizzes.length; i++) {
      const quiz = allQuizzes[i];
      const course = courses.find(
        (c) => c._id.toString() === quiz.courseId.toString()
      );
      let questionsToUse = genericQuestions;

      if (course.title.includes("React")) {
        questionsToUse = reactQuestions;
      } else if (course.title.includes("Vue")) {
        questionsToUse = vueQuestions;
      } else if (course.title.includes("Node")) {
        questionsToUse = nodeQuestions;
      } else if (course.title.includes("Python")) {
        questionsToUse = pythonQuestions;
      }

      for (let j = 0; j < 4; j++) {
        const questionData = questionsToUse[j % questionsToUse.length];
        const question = await Question.create({
          ...questionData,
          quizId: [quiz._id],
        });
        allQuestions.push(question);
      }
    }
    console.log("‚úÖ ƒê√£ seed Questions");

    // Update quizzes with questions
    for (let i = 0; i < allQuizzes.length; i++) {
      const quiz = allQuizzes[i];
      const quizQuestions = allQuestions.filter((q) =>
        q.quizId.some((id) => id.toString() === quiz._id.toString())
      );
      await Quiz.findByIdAndUpdate(quiz._id, {
        questions: quizQuestions.map((q) => q._id),
      });
    }

    // Update courses with lessons and quizzes
    for (let i = 0; i < courses.length; i++) {
      const course = courses[i];
      const courseLessons = allLessons.filter(
        (l) => l.courseId.toString() === course._id.toString()
      );
      const courseQuizzes = allQuizzes.filter(
        (q) => q.courseId.toString() === course._id.toString()
      );

      await Course.findByIdAndUpdate(course._id, {
        lessons: courseLessons.map((l) => l._id),
        quizzes: courseQuizzes.map((q) => q._id),
      });
    }

    // 7. Seed Reviews (30 reviews)
    const reviewComments = [
      "Kh√≥a h·ªçc r·∫•t hay! Gi·∫£ng vi√™n gi·∫£i th√≠ch r·∫•t r√µ r√†ng v√† d·ªÖ hi·ªÉu.",
      "N·ªôi dung kh√≥a h·ªçc ch·∫•t l∆∞·ª£ng, c√°c v√≠ d·ª• th·ª±c t·∫ø r·∫•t b·ªï √≠ch.",
      "Tuy·ªát v·ªùi! T·ª´ kh√¥ng bi·∫øt g√¨ ƒë·∫øn c√≥ th·ªÉ l√†m ƒë∆∞·ª£c d·ª± √°n th·ª±c t·∫ø.",
      "Kh√≥a h·ªçc r·∫•t b·ªï √≠ch. T√¥i ƒë√£ h·ªçc ƒë∆∞·ª£c nhi·ªÅu ki·∫øn th·ª©c m·ªõi.",
      "Gi·∫£ng vi√™n nhi·ªát t√¨nh, support h·ªçc vi√™n r·∫•t t·ªët.",
      "N·ªôi dung c·∫≠p nh·∫≠t, theo k·ªãp trend c√¥ng ngh·ªá hi·ªán t·∫°i.",
      "B√†i t·∫≠p th·ª±c h√†nh phong ph√∫, gi√∫p consolidate ki·∫øn th·ª©c.",
      "Kh√≥a h·ªçc ƒë√°ng gi√° ti·ªÅn, recommend cho m·ªçi ng∆∞·ªùi.",
      "C√°ch tr√¨nh b√†y d·ªÖ hi·ªÉu, ph√π h·ª£p cho beginners.",
      "Project cu·ªëi kh√≥a r·∫•t th·ª±c t·∫ø, √°p d·ª•ng ƒë∆∞·ª£c v√†o c√¥ng vi·ªác.",
    ];

    const reviews = [];
    for (let i = 0; i < 30; i++) {
      const randomCourse = courses[Math.floor(Math.random() * courses.length)];
      const randomStudent =
        students[Math.floor(Math.random() * students.length)];
      const randomRating = Math.floor(Math.random() * 2) + 4; // 4-5 stars
      const randomComment =
        reviewComments[Math.floor(Math.random() * reviewComments.length)];

      reviews.push({
        courseId: randomCourse._id,
        userId: randomStudent._id,
        rating: randomRating,
        comment: randomComment,
      });
    }

    await Review.insertMany(reviews);
    console.log("‚úÖ ƒê√£ seed Reviews");

    // 8. Seed Discussions (20 discussions)
    const discussionTopics = [
      "Khi n√†o n√™n s·ª≠ d·ª•ng framework n√†y thay v√¨ framework kh√°c?",
      "Best practices khi l√†m vi·ªác v·ªõi technology n√†y?",
      "L√†m th·∫ø n√†o ƒë·ªÉ optimize performance?",
      "C√°ch debug hi·ªáu qu·∫£ nh·∫•t l√† g√¨?",
      "C√≥ n√™n h·ªçc technology n√†y trong nƒÉm 2024 kh√¥ng?",
      "So s√°nh v·ªõi c√°c alternatives kh√°c nh∆∞ th·∫ø n√†o?",
      "Roadmap h·ªçc t·∫≠p cho beginners?",
      "T√†i nguy√™n h·ªçc t·∫≠p n√†o t·ªët nh·∫•t?",
      "D·ª± √°n practice n√†o ph√π h·ª£p?",
      "Career path v·ªõi technology n√†y ra sao?",
    ];

    const teacherAnswers = [
      "ƒê√¢y l√† c√¢u h·ªèi r·∫•t hay! D·ª±a tr√™n kinh nghi·ªám c·ªßa t√¥i...",
      "Trong th·ª±c t·∫ø, ch√∫ng ta n√™n xem x√©t c√°c factors sau...",
      "Best practice m√† t√¥i recommend l√†...",
      "T·ª´ perspective c·ªßa industry, t√¥i th·∫•y...",
      "D·ª±a v√†o project requirements, b·∫°n c√≥ th·ªÉ...",
      "Theo kinh nghi·ªám l√†m vi·ªác, t√¥i suggest...",
      "ƒêi·ªÅu quan tr·ªçng c·∫ßn l∆∞u √Ω l√†...",
      "Trong case n√†y, approach t·ªët nh·∫•t l√†...",
    ];

    const discussions = [];
    for (let i = 0; i < 20; i++) {
      const randomCourse = courses[Math.floor(Math.random() * courses.length)];
      const randomStudent =
        students[Math.floor(Math.random() * students.length)];
      const randomTopic =
        discussionTopics[Math.floor(Math.random() * discussionTopics.length)];
      const randomTeacher =
        teachers[Math.floor(Math.random() * teachers.length)];
      const randomAnswer =
        teacherAnswers[Math.floor(Math.random() * teacherAnswers.length)];

      discussions.push({
        courseId: randomCourse._id,
        userId: randomStudent._id,
        question: randomTopic,
        answers: [
          {
            userId: randomTeacher._id,
            answer: randomAnswer,
          },
        ],
        isClose: Math.random() > 0.8, // 20% chance to be closed
      });
    }

    await Discussion.insertMany(discussions);
    console.log("‚úÖ ƒê√£ seed Discussions");

    // 9. Seed Notifications (40 notifications)
    const notificationMessages = [
      "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi EduTech! H√£y b·∫Øt ƒë·∫ßu h·ªçc t·∫≠p ngay h√¥m nay.",
      "B·∫°n c√≥ m·ªôt b√†i quiz m·ªõi trong kh√≥a h·ªçc ƒë√£ ƒëƒÉng k√Ω.",
      "Gi·∫£ng vi√™n ƒë√£ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n trong di·ªÖn ƒë√†n th·∫£o lu·∫≠n.",
      "Kh√≥a h·ªçc m·ªõi ph√π h·ª£p v·ªõi b·∫°n ƒë√£ ƒë∆∞·ª£c ra m·∫Øt.",
      "Nh·∫Øc nh·ªü: B·∫°n c√≥ l·ªãch h·ªçc s·∫Øp t·ªõi.",
      "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh m·ªôt b√†i h·ªçc.",
      "C√≥ c·∫≠p nh·∫≠t m·ªõi trong kh√≥a h·ªçc b·∫°n ƒëang theo h·ªçc.",
      "B·∫°n nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn m·ªõi t·ª´ gi·∫£ng vi√™n.",
      "Deadline n·ªôp b√†i t·∫≠p s·∫Øp ƒë·∫øn h·∫°n.",
      "K·∫øt qu·∫£ quiz c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng.",
    ];

    const notificationTypes = [
      "welcome",
      "quiz",
      "discussion",
      "course",
      "schedule",
      "lesson",
      "update",
      "message",
      "assignment",
      "result",
    ];

    const notifications = [];
    for (let i = 0; i < 40; i++) {
      const randomUser = [...students, ...teachers][
        Math.floor(Math.random() * (students.length + teachers.length))
      ];
      const randomMessage =
        notificationMessages[
          Math.floor(Math.random() * notificationMessages.length)
        ];
      const randomType =
        notificationTypes[Math.floor(Math.random() * notificationTypes.length)];

      notifications.push({
        userId: randomUser._id,
        message: randomMessage,
        type: randomType,
        seen: Math.random() > 0.3, // 70% chance to be seen
      });
    }

    await Notification.insertMany(notifications);
    console.log("‚úÖ ƒê√£ seed Notifications");

    // 10. Seed Schedules (15 schedules)
    const scheduleTypes = [
      "online_class",
      "consultation",
      "workshop",
      "group_study",
      "exam",
    ];
    const meetingLinks = [
      "https://meet.google.com/abc-def-ghi",
      "https://zoom.us/j/1234567890",
      "https://teams.microsoft.com/l/meetup-join/19%3ameeting",
      "https://whereby.com/meeting-room-123",
      "https://discord.gg/education-channel",
    ];

    const schedules = [];
    for (let i = 0; i < 15; i++) {
      const randomTeacher =
        teachers[Math.floor(Math.random() * teachers.length)];
      const randomType =
        scheduleTypes[Math.floor(Math.random() * scheduleTypes.length)];
      const randomLink =
        meetingLinks[Math.floor(Math.random() * meetingLinks.length)];

      // Random future dates
      const startDate = new Date();
      startDate.setDate(
        startDate.getDate() + Math.floor(Math.random() * 30) + 1
      ); // 1-30 days from now
      startDate.setHours(Math.floor(Math.random() * 8) + 9); // 9AM - 5PM
      startDate.setMinutes(0);

      const endDate = new Date(startDate);
      endDate.setHours(endDate.getHours() + Math.floor(Math.random() * 3) + 1); // 1-3 hours duration

      // Random participants
      const participantCount = Math.floor(Math.random() * 5) + 2; // 2-6 participants
      const usersJoin = [];
      const shuffledStudents = [...students].sort(() => 0.5 - Math.random());

      for (
        let j = 0;
        j < participantCount && j < shuffledStudents.length;
        j++
      ) {
        const statuses = ["confirmed", "pending", "declined"];
        usersJoin.push({
          userId: shuffledStudents[j]._id,
          status: statuses[Math.floor(Math.random() * statuses.length)],
        });
      }

      schedules.push({
        userCreated: randomTeacher._id,
        usersJoin: usersJoin,
        type: randomType,
        link: randomLink,
        timeStart: startDate,
        timeEnd: endDate,
      });
    }

    await Schedule.insertMany(schedules);
    console.log("‚úÖ ƒê√£ seed Schedules");

    // 11. Seed UsersQuizzes (50 quiz results)
    const feedbacks = [
      "Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c c∆° b·∫£n.",
      "T·ªët! Tuy nhi√™n b·∫°n c·∫ßn √¥n l·∫°i m·ªôt s·ªë kh√°i ni·ªám.",
      "Kh√° t·ªët! Ti·∫øp t·ª•c effort ƒë·ªÉ improve h∆°n n·ªØa.",
      "C·∫ßn c·∫£i thi·ªán! H√£y xem l·∫°i materials v√† practice th√™m.",
      "Tuy·ªát v·ªùi! B·∫°n hi·ªÉu r√µ c√°c concepts ƒë√£ h·ªçc.",
      "R·∫•t t·ªët! Knowledge foundation c·ªßa b·∫°n r·∫•t solid.",
      "C·∫ßn focus h∆°n v√†o weak areas ƒë∆∞·ª£c highlight.",
      "Perfect! B·∫°n ready cho level ti·∫øp theo.",
      "Good job! M·ªôt s·ªë areas c·∫ßn improve th√™m.",
      "Excellent work! Keep up the momentum.",
    ];

    const usersQuizzes = [];
    for (let i = 0; i < 50; i++) {
      const randomStudent =
        students[Math.floor(Math.random() * students.length)];
      const randomQuiz =
        allQuizzes[Math.floor(Math.random() * allQuizzes.length)];
      const quizQuestions = allQuestions.filter((q) =>
        q.quizId.some((id) => id.toString() === randomQuiz._id.toString())
      );

      // Generate random answers
      const answers = quizQuestions.map((question) => {
        const correctAnswers = question.answers.filter((a) => a.isCorrect);
        const incorrectAnswers = question.answers.filter((a) => !a.isCorrect);

        // 70% chance to answer correctly
        if (Math.random() > 0.3 && correctAnswers.length > 0) {
          if (question.questionType[0] === "single_choice") {
            return {
              questionId: question._id,
              answer: correctAnswers[0].answerText,
            };
          } else {
            return {
              questionId: question._id,
              answer: correctAnswers.map((a) => a.answerText).join(","),
            };
          }
        } else {
          // Wrong answer
          return {
            questionId: question._id,
            answer: incorrectAnswers[0]?.answerText || "No answer",
          };
        }
      });

      const score = Math.floor(Math.random() * 50) + 50; // 50-100 points
      const randomFeedback =
        feedbacks[Math.floor(Math.random() * feedbacks.length)];

      usersQuizzes.push({
        userId: randomStudent._id,
        quizId: randomQuiz._id,
        answers: answers,
        score: score,
        feedback: randomFeedback,
      });
    }

    await UsersQuizzes.insertMany(usersQuizzes);
    console.log("‚úÖ ƒê√£ seed UsersQuizzes");

    console.log("\nüéâ SEED DATA M·ªû R·ªòNG HO√ÄN TH√ÄNH!");
    console.log("üìä Th·ªëng k√™ d·ªØ li·ªáu ƒë√£ t·∫°o:");
    console.log(`- Categories: ${categories.length}`);
    console.log(
      `- Users: ${users.length} (${teachers.length} gi·∫£ng vi√™n, ${students.length} h·ªçc vi√™n, 1 admin)`
    );
    console.log(`- Courses: ${courses.length}`);
    console.log(`- Lessons: ${allLessons.length}`);
    console.log(`- Quizzes: ${allQuizzes.length}`);
    console.log(`- Questions: ${allQuestions.length}`);
    console.log(`- Reviews: 30`);
    console.log(`- Discussions: 20`);
    console.log(`- Notifications: 40`);
    console.log(`- Schedules: 15`);
    console.log(`- Quiz Results: 50`);

    console.log("\nüîê Th√¥ng tin ƒëƒÉng nh·∫≠p m·∫´u:");
    console.log("Admin: admin@edutech.vn / 123456");
    console.log("Gi·∫£ng vi√™n: nguyenvana@edutech.vn / 123456");
    console.log("H·ªçc vi√™n: student1@gmail.com / 123456");

    console.log("\nüìö Kh√≥a h·ªçc n·ªïi b·∫≠t:");
    console.log("- React.js T·ª´ C∆° B·∫£n ƒê·∫øn N√¢ng Cao");
    console.log("- Vue.js 3 & Composition API");
    console.log("- Node.js Backend Development");
    console.log("- Python cho Khoa H·ªçc D·ªØ Li·ªáu");
    console.log("- Flutter - Ph√°t tri·ªÉn App di ƒë·ªông");
    console.log("- DevOps v·ªõi Docker v√† Kubernetes");
    console.log("- Blockchain v√† Smart Contracts");
    console.log("- Unity Game Development 2D/3D");
  } catch (error) {
    console.error("‚ùå L·ªói khi seed data:", error);
  } finally {
    await mongoose.connection.close();
    console.log("üîö ƒê√£ ƒë√≥ng k·∫øt n·ªëi database");
    process.exit(0);
  }
};

// Ch·∫°y extended seed data
seedExtendedData();
