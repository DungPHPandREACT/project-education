import mongoose from "mongoose";
import bcrypt from "bcrypt";
import { connectDB } from "../config/db";

// Import models
import Category from "../modules/category/models/category.model";
import User from "../modules/user/models/user.model";
import Course from "../modules/course/models/course.model";
import Lesson from "../modules/lesson/models/lesson.model";
import Quiz from "../modules/quizz/models/quizz.model";
import Question from "../modules/question/models/question.model";
import Review from "../modules/review/models/review.model";
import Discussion from "../modules/discussion/models/discussion.model";
import Notification from "../modules/notification/models/notification.model";
import Schedule from "../modules/schedule/models/schedule.model";
import UsersQuizzes from "../modules/users_quizzes/models/users_quizzes.model";

const seedData = async () => {
  try {
    // K·∫øt n·ªëi database
    await connectDB();
    console.log("üîó ƒê√£ k·∫øt n·ªëi database");

    // X√≥a d·ªØ li·ªáu c≈©
    await Promise.all([
      Category.deleteMany({}),
      User.deleteMany({}),
      Course.deleteMany({}),
      Lesson.deleteMany({}),
      Quiz.deleteMany({}),
      Question.deleteMany({}),
      Review.deleteMany({}),
      Discussion.deleteMany({}),
      Notification.deleteMany({}),
      Schedule.deleteMany({}),
      UsersQuizzes.deleteMany({}),
    ]);
    console.log("üßπ ƒê√£ x√≥a d·ªØ li·ªáu c≈©");

    // 1. Seed Categories
    const categories = await Category.insertMany([
      {
        title: "L·∫≠p tr√¨nh Web",
        description: "C√°c kh√≥a h·ªçc v·ªÅ ph√°t tri·ªÉn web frontend v√† backend",
      },
      {
        title: "Khoa h·ªçc d·ªØ li·ªáu",
        description: "Machine learning, AI v√† ph√¢n t√≠ch d·ªØ li·ªáu",
      },
      {
        title: "Thi·∫øt k·∫ø UI/UX",
        description: "Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng",
      },
      {
        title: "Mobile Development",
        description: "Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông iOS v√† Android",
      },
      {
        title: "DevOps",
        description: "Tri·ªÉn khai, qu·∫£n l√Ω h·ªá th·ªëng v√† CI/CD",
      },
      {
        title: "Blockchain",
        description: "C√¥ng ngh·ªá blockchain v√† smart contracts",
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Categories");

    // 2. Seed Users
    const hashedPassword = await bcrypt.hash("123456", 12);

    const users = await User.insertMany([
      // Admin
      {
        email: "admin@edutech.vn",
        password: hashedPassword,
        fullName: "Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng",
        role: "admin",
        avatar: "https://i.pravatar.cc/400?img=1",
      },
      // Teachers
      {
        email: "nguyenvana@edutech.vn",
        password: hashedPassword,
        fullName: "Nguy·ªÖn VƒÉn An",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=2",
      },
      {
        email: "lethib@edutech.vn",
        password: hashedPassword,
        fullName: "L√™ Th·ªã B√¨nh",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=3",
      },
      {
        email: "tranvanc@edutech.vn",
        password: hashedPassword,
        fullName: "Tr·∫ßn VƒÉn C∆∞·ªùng",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=4",
      },
      {
        email: "phamthid@edutech.vn",
        password: hashedPassword,
        fullName: "Ph·∫°m Th·ªã Dung",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=5",
      },
      {
        email: "hoangvane@edutech.vn",
        password: hashedPassword,
        fullName: "Ho√†ng VƒÉn Em",
        role: "teacher",
        avatar: "https://i.pravatar.cc/400?img=6",
      },
      // Students
      {
        email: "student1@gmail.com",
        password: hashedPassword,
        fullName: "Nguy·ªÖn Th·ªã Hoa",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=10",
      },
      {
        email: "student2@gmail.com",
        password: hashedPassword,
        fullName: "Tr·∫ßn VƒÉn Minh",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=11",
      },
      {
        email: "student3@gmail.com",
        password: hashedPassword,
        fullName: "L√™ Th·ªã Lan",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=12",
      },
      {
        email: "student4@gmail.com",
        password: hashedPassword,
        fullName: "Ph·∫°m VƒÉn Nam",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=13",
      },
      {
        email: "student5@gmail.com",
        password: hashedPassword,
        fullName: "V≈© Th·ªã Oanh",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=14",
      },
      {
        email: "student6@gmail.com",
        password: hashedPassword,
        fullName: "ƒê·∫∑ng VƒÉn Ph√∫c",
        role: "student",
        avatar: "https://i.pravatar.cc/400?img=15",
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Users");

    // L·∫•y teachers v√† students
    const teachers = users.filter((user) => user.role === "teacher");
    const students = users.filter((user) => user.role === "student");

    // 3. Seed Courses
    const courses = await Course.insertMany([
      {
        title: "React.js T·ª´ C∆° B·∫£n ƒê·∫øn N√¢ng Cao",
        description:
          "Kh√≥a h·ªçc to√†n di·ªán v·ªÅ React.js, t·ª´ nh·ªØng kh√°i ni·ªám c∆° b·∫£n ƒë·∫øn c√°c k·ªπ thu·∫≠t n√¢ng cao. B·∫°n s·∫Ω h·ªçc c√°ch x√¢y d·ª±ng ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i v·ªõi React.",
        instructorId: teachers[0]._id,
        category: "L·∫≠p tr√¨nh Web",
        users: [students[0]._id, students[1]._id, students[2]._id],
        resources: [
          "https://reactjs.org/docs",
          "https://github.com/facebook/react",
          "React Developer Tools",
        ],
      },
      {
        title: "Python cho Khoa H·ªçc D·ªØ Li·ªáu",
        description:
          "H·ªçc Python t·ª´ ƒë·∫ßu v·ªõi focus v√†o data science. Kh√≥a h·ªçc bao g·ªìm pandas, numpy, matplotlib v√† machine learning c∆° b·∫£n.",
        instructorId: teachers[1]._id,
        category: "Khoa h·ªçc d·ªØ li·ªáu",
        users: [students[1]._id, students[2]._id, students[3]._id],
        resources: [
          "https://pandas.pydata.org/",
          "https://numpy.org/",
          "Jupyter Notebook",
        ],
      },
      {
        title: "Thi·∫øt k·∫ø UI/UX v·ªõi Figma",
        description:
          "Kh√≥a h·ªçc thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng chuy√™n nghi·ªáp v·ªõi Figma. T·ª´ wireframe ƒë·∫øn prototype ho√†n ch·ªânh.",
        instructorId: teachers[2]._id,
        category: "Thi·∫øt k·∫ø UI/UX",
        users: [students[0]._id, students[3]._id, students[4]._id],
        resources: [
          "https://figma.com",
          "Material Design Guidelines",
          "Apple Human Interface Guidelines",
        ],
      },
      {
        title: "Flutter - Ph√°t tri·ªÉn App di ƒë·ªông",
        description:
          "X√¢y d·ª±ng ·ª©ng d·ª•ng di ƒë·ªông cho c·∫£ iOS v√† Android v·ªõi Flutter. T·ª´ c∆° b·∫£n ƒë·∫øn deploy l√™n store.",
        instructorId: teachers[3]._id,
        category: "Mobile Development",
        users: [students[2]._id, students[4]._id, students[5]._id],
        resources: [
          "https://flutter.dev/",
          "Dart Language Tour",
          "Firebase Documentation",
        ],
      },
      {
        title: "DevOps v·ªõi Docker v√† Kubernetes",
        description:
          "H·ªçc c√°ch containerize ·ª©ng d·ª•ng v·ªõi Docker v√† orchestration v·ªõi Kubernetes. Bao g·ªìm CI/CD pipeline.",
        instructorId: teachers[4]._id,
        category: "DevOps",
        users: [students[1]._id, students[4]._id, students[5]._id],
        resources: [
          "https://docs.docker.com/",
          "https://kubernetes.io/docs/",
          "Jenkins Documentation",
        ],
      },
      {
        title: "Blockchain v√† Smart Contracts",
        description:
          "T√¨m hi·ªÉu c√¥ng ngh·ªá blockchain, ph√°t tri·ªÉn smart contracts v·ªõi Solidity v√† x√¢y d·ª±ng DApps.",
        instructorId: teachers[0]._id,
        category: "Blockchain",
        users: [students[0]._id, students[2]._id, students[5]._id],
        resources: [
          "https://ethereum.org/",
          "Solidity Documentation",
          "Web3.js Guide",
        ],
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Courses");

    // 4. Seed Lessons
    const lessons = [];

    // Lessons cho React.js course
    const reactLessons = await Lesson.insertMany([
      {
        title: "Gi·ªõi thi·ªáu v·ªÅ React.js",
        content:
          "React l√† m·ªôt th∆∞ vi·ªán JavaScript ƒë·ªÉ x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng. Trong b√†i h·ªçc n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ l·ªãch s·ª≠, ∆∞u ƒëi·ªÉm v√† c√°ch c√†i ƒë·∫∑t React.",
        courseId: courses[0]._id,
        resources: ["Create React App", "Node.js v√† npm"],
      },
      {
        title: "JSX v√† Components",
        content:
          "JSX l√† c√∫ ph√°p m·ªü r·ªông c·ªßa JavaScript cho ph√©p vi·∫øt HTML trong JavaScript. Components l√† kh·ªëi x√¢y d·ª±ng c∆° b·∫£n c·ªßa React.",
        courseId: courses[0]._id,
        resources: ["JSX In Depth", "Thinking in React"],
      },
      {
        title: "State v√† Props",
        content:
          "State v√† Props l√† hai kh√°i ni·ªám quan tr·ªçng trong React. State qu·∫£n l√Ω d·ªØ li·ªáu n·ªôi b·ªô, Props truy·ªÅn d·ªØ li·ªáu gi·ªØa components.",
        courseId: courses[0]._id,
        resources: ["State and Lifecycle", "Props vs State"],
      },
      {
        title: "Event Handling",
        content:
          "X·ª≠ l√Ω s·ª± ki·ªán trong React kh√°c m·ªôt ch√∫t so v·ªõi DOM thu·∫ßn. T√¨m hi·ªÉu SyntheticEvent v√† c√°ch bind methods.",
        courseId: courses[0]._id,
        resources: ["Handling Events", "SyntheticEvent"],
      },
    ]);

    // Lessons cho Python Data Science course
    const pythonLessons = await Lesson.insertMany([
      {
        title: "Python C∆° B·∫£n cho Data Science",
        content:
          "T·ªïng quan v·ªÅ Python, c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng, v√† c√°c library quan tr·ªçng trong data science.",
        courseId: courses[1]._id,
        resources: ["Python.org", "Anaconda Distribution"],
      },
      {
        title: "NumPy - X·ª≠ l√Ω m·∫£ng s·ªë",
        content:
          "NumPy l√† th∆∞ vi·ªán c∆° b·∫£n cho t√≠nh to√°n khoa h·ªçc trong Python. H·ªçc c√°ch l√†m vi·ªác v·ªõi arrays v√† matrices.",
        courseId: courses[1]._id,
        resources: ["NumPy Quickstart", "Array Broadcasting"],
      },
      {
        title: "Pandas - Ph√¢n t√≠ch d·ªØ li·ªáu",
        content:
          "Pandas cung c·∫•p c·∫•u tr√∫c d·ªØ li·ªáu v√† c√¥ng c·ª• ph√¢n t√≠ch m·∫°nh m·∫Ω. DataFrame v√† Series l√† hai kh√°i ni·ªám ch√≠nh.",
        courseId: courses[1]._id,
        resources: ["10 Minutes to Pandas", "Pandas Cookbook"],
      },
    ]);

    lessons.push(...reactLessons, ...pythonLessons);
    console.log("‚úÖ ƒê√£ seed Lessons");

    // 5. Seed Quizzes
    const quizzes = await Quiz.insertMany([
      {
        title: "Ki·ªÉm tra React.js C∆° B·∫£n",
        description: "ƒê√°nh gi√° ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ React.js, JSX v√† Components",
        courseId: courses[0]._id,
        duration: 30,
        level: 1,
        category: categories[0]._id,
      },
      {
        title: "Python NumPy Quiz",
        description: "Ki·ªÉm tra hi·ªÉu bi·∫øt v·ªÅ NumPy arrays v√† operations",
        courseId: courses[1]._id,
        duration: 25,
        level: 2,
        category: categories[1]._id,
      },
      {
        title: "UI/UX Design Principles",
        description: "ƒê√°nh gi√° ki·∫øn th·ª©c v·ªÅ nguy√™n t·∫Øc thi·∫øt k·∫ø UI/UX",
        courseId: courses[2]._id,
        duration: 20,
        level: 1,
        category: categories[2]._id,
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Quizzes");

    // 6. Seed Questions
    const questions = await Question.insertMany([
      // Questions cho React quiz
      {
        questionText: "JSX l√† vi·∫øt t·∫Øt c·ªßa g√¨?",
        answers: [
          { answerText: "JavaScript XML", isCorrect: true },
          { answerText: "Java Syntax Extension", isCorrect: false },
          { answerText: "JavaScript eXtension", isCorrect: false },
          { answerText: "JSON XML", isCorrect: false },
        ],
        quizId: [quizzes[0]._id],
        questionType: ["single_choice"],
      },
      {
        questionText: "Component n√†o sau ƒë√¢y l√† functional component?",
        answers: [
          {
            answerText: "class MyComponent extends React.Component",
            isCorrect: false,
          },
          {
            answerText: "function MyComponent() { return <div></div> }",
            isCorrect: true,
          },
          {
            answerText: "const MyComponent = React.createClass()",
            isCorrect: false,
          },
          {
            answerText: "var MyComponent = new React.Component()",
            isCorrect: false,
          },
        ],
        quizId: [quizzes[0]._id],
        questionType: ["single_choice"],
      },
      // Questions cho Python quiz
      {
        questionText: "NumPy array c√≥ ∆∞u ƒëi·ªÉm g√¨ so v·ªõi Python list?",
        answers: [
          { answerText: "Nhanh h∆°n trong t√≠nh to√°n", isCorrect: true },
          { answerText: "Ti·∫øt ki·ªám b·ªô nh·ªõ h∆°n", isCorrect: true },
          { answerText: "H·ªó tr·ª£ vectorization", isCorrect: true },
          { answerText: "D·ªÖ s·ª≠ d·ª•ng h∆°n", isCorrect: false },
        ],
        quizId: [quizzes[1]._id],
        questionType: ["multiple_choice"],
      },
      // Questions cho UI/UX quiz
      {
        questionText: "Nguy√™n t·∫Øc n√†o quan tr·ªçng nh·∫•t trong thi·∫øt k·∫ø UI?",
        answers: [
          { answerText: "Consistency (T√≠nh nh·∫•t qu√°n)", isCorrect: true },
          { answerText: "M√†u s·∫Øc ƒë·∫πp", isCorrect: false },
          { answerText: "Font ch·ªØ l·∫°", isCorrect: false },
          { answerText: "Hi·ªáu ·ª©ng nhi·ªÅu", isCorrect: false },
        ],
        quizId: [quizzes[2]._id],
        questionType: ["single_choice"],
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Questions");

    // Update quizzes with questions
    await Quiz.findByIdAndUpdate(quizzes[0]._id, {
      questions: questions
        .filter((q) => q.quizId[0].toString() === quizzes[0]._id.toString())
        .map((q) => q._id),
    });
    await Quiz.findByIdAndUpdate(quizzes[1]._id, {
      questions: questions
        .filter((q) => q.quizId[0].toString() === quizzes[1]._id.toString())
        .map((q) => q._id),
    });
    await Quiz.findByIdAndUpdate(quizzes[2]._id, {
      questions: questions
        .filter((q) => q.quizId[0].toString() === quizzes[2]._id.toString())
        .map((q) => q._id),
    });

    // Update courses with lessons and quizzes
    await Course.findByIdAndUpdate(courses[0]._id, {
      lessons: reactLessons.map((l) => l._id),
      quizzes: [quizzes[0]._id],
    });
    await Course.findByIdAndUpdate(courses[1]._id, {
      lessons: pythonLessons.map((l) => l._id),
      quizzes: [quizzes[1]._id],
    });
    await Course.findByIdAndUpdate(courses[2]._id, {
      quizzes: [quizzes[2]._id],
    });

    // 7. Seed Reviews
    await Review.insertMany([
      {
        courseId: courses[0]._id,
        userId: students[0]._id,
        rating: 5,
        comment:
          "Kh√≥a h·ªçc r·∫•t hay! Gi·∫£ng vi√™n gi·∫£i th√≠ch r·∫•t r√µ r√†ng v√† d·ªÖ hi·ªÉu. T√¥i ƒë√£ h·ªçc ƒë∆∞·ª£c r·∫•t nhi·ªÅu v·ªÅ React.",
      },
      {
        courseId: courses[0]._id,
        userId: students[1]._id,
        rating: 4,
        comment:
          "N·ªôi dung kh√≥a h·ªçc ch·∫•t l∆∞·ª£ng, c√°c v√≠ d·ª• th·ª±c t·∫ø. Tuy nhi√™n c√≥ m·ªôt s·ªë ph·∫ßn h∆°i kh√≥ hi·ªÉu.",
      },
      {
        courseId: courses[1]._id,
        userId: students[2]._id,
        rating: 5,
        comment:
          "Tuy·ªát v·ªùi! T·ª´ kh√¥ng bi·∫øt g√¨ v·ªÅ Python ƒë·∫øn c√≥ th·ªÉ l√†m ƒë∆∞·ª£c data analysis c∆° b·∫£n.",
      },
      {
        courseId: courses[2]._id,
        userId: students[3]._id,
        rating: 4,
        comment:
          "Kh√≥a h·ªçc thi·∫øt k·∫ø UI/UX r·∫•t b·ªï √≠ch. T√¥i ƒë√£ hi·ªÉu ƒë∆∞·ª£c nhi·ªÅu nguy√™n t·∫Øc thi·∫øt k·∫ø quan tr·ªçng.",
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Reviews");

    // 8. Seed Discussions
    await Discussion.insertMany([
      {
        courseId: courses[0]._id,
        userId: students[0]._id,
        question:
          "Khi n√†o n√™n s·ª≠ d·ª•ng class component v√† khi n√†o n√™n s·ª≠ d·ª•ng functional component?",
        answers: [
          {
            userId: teachers[0]._id,
            answer:
              "Hi·ªán t·∫°i v·ªõi React Hooks, functional component ƒë∆∞·ª£c khuy·∫øn kh√≠ch s·ª≠ d·ª•ng h∆°n. Class component ch·ªâ c·∫ßn thi·∫øt trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát nh∆∞ error boundaries.",
          },
          {
            userId: students[1]._id,
            answer:
              "M√¨nh c≈©ng ƒëang th·∫Øc m·∫Øc v·ªÅ ƒëi·ªÅu n√†y. C·∫£m ∆°n th·∫ßy ƒë√£ gi·∫£i ƒë√°p!",
          },
        ],
        isClose: false,
      },
      {
        courseId: courses[1]._id,
        userId: students[2]._id,
        question: "L√†m th·∫ø n√†o ƒë·ªÉ x·ª≠ l√Ω missing data trong pandas?",
        answers: [
          {
            userId: teachers[1]._id,
            answer:
              "C√≥ nhi·ªÅu c√°ch: dropna() ƒë·ªÉ lo·∫°i b·ªè, fillna() ƒë·ªÉ ƒëi·ªÅn gi√° tr·ªã, ho·∫∑c interpolate() cho interpolation. T√πy thu·ªôc v√†o t·ª´ng tr∆∞·ªùng h·ª£p c·ª• th·ªÉ.",
          },
        ],
        isClose: false,
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Discussions");

    // 9. Seed Notifications
    await Notification.insertMany([
      {
        userId: students[0]._id,
        message:
          "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi EduTech! H√£y b·∫Øt ƒë·∫ßu h·ªçc t·∫≠p ngay h√¥m nay.",
        type: "welcome",
        seen: false,
      },
      {
        userId: students[0]._id,
        message: "B·∫°n c√≥ m·ªôt b√†i quiz m·ªõi trong kh√≥a h·ªçc React.js",
        type: "quiz",
        seen: false,
      },
      {
        userId: students[1]._id,
        message:
          "Gi·∫£ng vi√™n ƒë√£ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n trong di·ªÖn ƒë√†n th·∫£o lu·∫≠n",
        type: "discussion",
        seen: true,
      },
      {
        userId: teachers[0]._id,
        message: "B·∫°n c√≥ h·ªçc vi√™n m·ªõi ƒëƒÉng k√Ω kh√≥a h·ªçc React.js",
        type: "course",
        seen: false,
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Notifications");

    // 10. Seed Schedules
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const nextWeek = new Date();
    nextWeek.setDate(nextWeek.getDate() + 7);

    await Schedule.insertMany([
      {
        userCreated: teachers[0]._id,
        usersJoin: [
          { userId: students[0]._id, status: "confirmed" },
          { userId: students[1]._id, status: "pending" },
          { userId: students[2]._id, status: "confirmed" },
        ],
        type: "online_class",
        link: "https://meet.google.com/abc-def-ghi",
        timeStart: tomorrow,
        timeEnd: new Date(tomorrow.getTime() + 2 * 60 * 60 * 1000), // 2 hours later
      },
      {
        userCreated: teachers[1]._id,
        usersJoin: [
          { userId: students[1]._id, status: "confirmed" },
          { userId: students[2]._id, status: "confirmed" },
          { userId: students[3]._id, status: "declined" },
        ],
        type: "consultation",
        link: "https://zoom.us/j/1234567890",
        timeStart: nextWeek,
        timeEnd: new Date(nextWeek.getTime() + 1 * 60 * 60 * 1000), // 1 hour later
      },
    ]);
    console.log("‚úÖ ƒê√£ seed Schedules");

    // 11. Seed UsersQuizzes (Quiz Results)
    await UsersQuizzes.insertMany([
      {
        userId: students[0]._id,
        quizId: quizzes[0]._id,
        answers: [
          { questionId: questions[0]._id, answer: "JavaScript XML" },
          {
            questionId: questions[1]._id,
            answer: "function MyComponent() { return <div></div> }",
          },
        ],
        score: 100,
        feedback: "Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ React.js.",
      },
      {
        userId: students[1]._id,
        quizId: quizzes[0]._id,
        answers: [
          { questionId: questions[0]._id, answer: "JavaScript eXtension" },
          {
            questionId: questions[1]._id,
            answer: "function MyComponent() { return <div></div> }",
          },
        ],
        score: 50,
        feedback: "T·ªët! Tuy nhi√™n b·∫°n c·∫ßn √¥n l·∫°i m·ªôt s·ªë kh√°i ni·ªám c∆° b·∫£n.",
      },
      {
        userId: students[2]._id,
        quizId: quizzes[1]._id,
        answers: [
          {
            questionId: questions[2]._id,
            answer:
              "Nhanh h∆°n trong t√≠nh to√°n,Ti·∫øt ki·ªám b·ªô nh·ªõ h∆°n,H·ªó tr·ª£ vectorization",
          },
        ],
        score: 100,
        feedback: "Tuy·ªát v·ªùi! B·∫°n hi·ªÉu r√µ ∆∞u ƒëi·ªÉm c·ªßa NumPy.",
      },
    ]);
    console.log("‚úÖ ƒê√£ seed UsersQuizzes");

    console.log("\nüéâ SEED DATA HO√ÄN TH√ÄNH!");
    console.log("üìä Th·ªëng k√™ d·ªØ li·ªáu ƒë√£ t·∫°o:");
    console.log(`- Categories: ${categories.length}`);
    console.log(
      `- Users: ${users.length} (${teachers.length} gi·∫£ng vi√™n, ${students.length} h·ªçc vi√™n, 1 admin)`
    );
    console.log(`- Courses: ${courses.length}`);
    console.log(`- Lessons: ${lessons.length}`);
    console.log(`- Quizzes: ${quizzes.length}`);
    console.log(`- Questions: ${questions.length}`);
    console.log(`- Reviews: 4`);
    console.log(`- Discussions: 2`);
    console.log(`- Notifications: 4`);
    console.log(`- Schedules: 2`);
    console.log(`- Quiz Results: 3`);

    console.log("\nüîê Th√¥ng tin ƒëƒÉng nh·∫≠p:");
    console.log("Admin: admin@edutech.vn / 123456");
    console.log("Gi·∫£ng vi√™n: nguyenvana@edutech.vn / 123456");
    console.log("H·ªçc vi√™n: student1@gmail.com / 123456");
  } catch (error) {
    console.error("‚ùå L·ªói khi seed data:", error);
  } finally {
    await mongoose.connection.close();
    console.log("üîö ƒê√£ ƒë√≥ng k·∫øt n·ªëi database");
    process.exit(0);
  }
};

// Ch·∫°y seed data
seedData();
